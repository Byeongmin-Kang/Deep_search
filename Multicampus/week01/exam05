#1부터 10까지 출력
for i in range(10):
    print(i+1)
#짝수 출력
for i in range(10):
    if((i+1)%2==0):
        print(i+1)
#홀수 출력
for i in range(10):
    if((i+1)%2==1):
        print(i+1)
#짝수일 경우에는 짝수를, 홀수일 경우에는 홀수를 출력
number = 10
for i in range(1):
    if((number)%2==0):
        print(number)
    if((number)%2==1):
        print(number)

#professor's result
for i in range(1,11):
    if i%2==0:
        print('%d is even'%i)
    if i%2==1:
        print('%d is odd'%i)
#if문을 두번 사용할 경우에는 if~else        
for i in range(1,11):
    if i%2==0:
        print('%d is even'%i)
    else:
        print('%d is odd'%i)

#두개 이상의 조건이 있는!!
#예를 들어 윤년 : 4로 나누어 떨어지고 동시에, 100으로 나누어 떨어지면 -> 조건연산자
#and연산자 -> 둘이 만족되야할 때!! 조건 사이에 and 를 써주면 된다 
#or연산자 -> 둘 중에 하나만 만족하면 참일 때!!

year = 2016
if year%4==0 and year%100==0 :
    print('leap year')
else :
    print('general year')
    
year = 2000
if (year%4==0 and year%100==0) or (year%400==0):
    print('leap year')
else :
    print('general year')

#먼저 간단하게 생각해보기
number = 5
count = 0
for i in range(number):
    if number%(i+1)==0:
        count = count + 1
if(count==2):
    print('소수')
else :
    print('합성수')
    
#1000에서 2000사이의 소수(prime number)를 판별하여 출력하시오.
for j in range(2,101): #처리할 숫자를 제공하는 코딩
    number = j
    count =  0
    for i in range(number): #나누어서떨어지는 것이 몇개인지를 check하는 코딩
        if number%(i+1)==0:
            count = count + 1
    if (count==2):
        print('%d is prime number'%(number))
    else :
        print('%d is not prime number'%i)

#출력되는 소수의 개수가 몇개인가?
#for에 종속되고, 독립인지를 파악하는 것이 중요하다. 
cnt = 0  #아무것도 없다 초기화 한다!!! 매우 중요한 과정입니다. !!!!
for j in range(2,101): #처리할 숫자를 제공하는 코딩
    number = j
    count =  0
    for i in range(number): #나누어서떨어지는 것이 몇개인지를 check하는 코딩
        if number%(i+1)==0:
            count = count + 1
    if (count==2):
        cnt = cnt + 1
        print('%d is prime number'%(number))
print('소수의 수 = ',cnt)
"""
#반복을 제거한다. 하나의 코드(의미있는)를 다시사용한다!!! 
"""
함수
반복을 제거하는 또다른 방법은 함수를 이용하는 방법이다!!!
한줄의 코드로 의미 있는 결과 도출의 어려움
의미있는 결과를 도출하는 코드의 집합
여러 줄의 코드가 있어야함
ex)교실에서 나가기(일어나서, 방향잡고, 위치를 이동하고, 손잡이 열고), 재료 손질하기
다시 사용하기 위해서 사용하는 것이기 때문에, 빈번하게 발생해야함
()가 있느냐에 따라 구분이 가능하다.
재사용!!!!
자주 사용할 뿐만 아니라 구현하기가 어려울 때 사용한다. 
구현하기가 어렵지만 그 기능이 매우 중요할 때!
"""
#소수 판별 함수 만들어 보기
#함수 요청에 대한 응답을 해야합니다.
#소수니? 프라임 넘버다 아니다 로 결과가 나와용
"""
def isPrimeNumber(number):
    count =  0
    flag = False #기본값을 아니다 false로 #기본값으로 틀리다로 초기값으로 한다.
    for i in range(number): #나누어서떨어지는 것이 몇개인지를 check하는 코딩
        if number%(i+1)==0:
            count = count + 1
    if (count==2):
        flag = True
    
    return flag #flag 깃발 : 상황을 알려준다 !! 변수 

checkNumber = isPrimeNumber(5)
print(checkNumber)
print(type(checkNumber))
if checkNumber: #chechNumber의 결과는 참 거짓이다 !!!
    print('소수')
else :
    print('합성수')
#bool 참/거짓을 나타내는 논리형의 데이터 타입을 나태내는 것입니다. 
"""
#달력함수 만들기, 목적 : 출력 -> return이 할 것이 없으면, 안하면 됨!
"""
def viewMonth(_space,_month,_lastDay):
    space = _space
    month = _month
    lastDay = _lastDay
    print('\t\t\t2017년 %d월'%month)  
    print('Sun\tMon\tTue\tWed\tThr\tFri\tSat')
    for i in range(space):
        print('\t',end='')
    for i in range(lastDay):
        print('%d\t'%(i+1),end='') 
        if (i+1+space)%7==0:
            print() 
    return
for i in range(1,13):
    viewMonth(6,7,31)
"""
#기억할 것 : 작업 단위를 만들어야 한다.!! 곤란해지는 것을 피하기 위해서 
#12달을 한번에 보여주는 코딩 : 중요한 것은 month 나머지 둘은 이에 종속
"""
def viewMonth(_month):
    spaces = [0,3,3,6,1,4,5,2,5,0,3,5]
    lastDays = [31,28,31,30,31,30,31,31,30,31,30,31]
    space = spaces[_month-1] #사용자 입장에서 봐야합니다!! 보정 하나가 퀄리티 결정
    month = _month
    lastDay = lastDays[_month-1] #0부터 인덱스가 시작하므로!! 
    print('\t\t\t2017년 %d월'%month)  
    print('Sun\tMon\tTue\tWed\tThr\tFri\tSat')
    for i in range(space):
        print('\t',end='')
    for i in range(lastDay):
        print('%d\t'%(i+1),end='') 
        if (i+1+space)%7==0:
            print() 
    return
for i in range(1,13):
    viewMonth(i)
    print()   #print('\n')도 써보장~
"""
def viewMonth(_month):
    spaces = [0,3,3,6,1,4,5,2,5,0,3,5]
    lastDays = [31,28,31,30,31,30,31,31,30,31,30,31]
    space = spaces[_month-1] #사용자 입장에서 봐야합니다!! 보정 하나가 퀄리티 결정
    month = _month
    lastDay = lastDays[_month-1] #0부터 인덱스가 시작하므로!! 
    print('\t\t\t2017년 %d월'%month)  
    print('Sun\tMon\tTue\tWed\tThr\tFri\tSat')
    for i in range(space):
        print('\t',end='')
    for i in range(lastDay):
        print('%d\t'%(i+1),end='') 
        if (i+1+space)%7==0:
            print() 
    print()
    return

for i in range(1,13):
    viewMonth(i)
    
    
